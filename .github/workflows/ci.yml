name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sampledb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Initialize database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d sampledb -f data/postgres/init.sql
      
    - name: Run API tests
      run: |
        # Start API in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        
        # Run basic connectivity tests
        python -c "
        import requests
        import json
        
        # Test root endpoint
        response = requests.get('http://localhost:8000/')
        assert response.status_code == 200
        
        # Test database connection
        payload = {
            'host': 'localhost',
            'port': 5432,
            'database': 'sampledb', 
            'username': 'postgres',
            'password': 'postgres',
            'db_type': 'postgresql'
        }
        response = requests.post('http://localhost:8000/api/database/connect', json=payload)
        assert response.status_code == 200
        result = response.json()
        assert result['status'] == 'connected'
        
        # Test session creation
        response = requests.post('http://localhost:8000/api/chat/sessions')
        assert response.status_code == 200
        
        print('✅ All basic tests passed!')
        "
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t database-chatbot:test .
        
    - name: Test Docker compose
      run: |
        cd docker
        docker-compose up -d --build
        sleep 30
        
        # Test API accessibility
        curl -f http://localhost:8000/ || exit 1
        
        docker-compose down
        
        echo "✅ Docker integration test passed!"
